/*//////////////////////////////////////////////////////////////////////////////////////////////////////

Copyright 2010-2016, Jon Sneyers & Pieter Wuille
Copyright 2019, Jon Sneyers, Cloudinary (jon@cloudinary.com)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

//////////////////////////////////////////////////////////////////////////////////////////////////////*/

#pragma once

template <class Config, typename IO> class RacOutput
{
public:
    typedef typename Config::data_t rac_t;
protected:
    IO &io;
private:
    rac_t range;
    rac_t low;
    int delayed_byte;
    int delayed_count;

    void inline output()
    {
        while (range <= Config::MIN_RANGE) {
            int byte = low >> Config::MIN_RANGE_BITS;

            if (delayed_byte < 0) { // first generated byte
                delayed_byte = byte;
            } else if (((low + range) >> 8) < Config::MIN_RANGE) { // definitely no overflow
                io.fputc(delayed_byte);

                while (delayed_count) {
                    io.fputc(0xFF);
                    delayed_count--;
                }

                delayed_byte = byte;
            } else if ((low >> 8) >= Config::MIN_RANGE) { // definitely overflow
                io.fputc(delayed_byte + 1);

                while (delayed_count) {
                    io.fputc(0);
                    delayed_count--;
                }

                delayed_byte = byte & 0xFF;
            } else {
                delayed_count++;
            }

            low = (low & (Config::MIN_RANGE - 1)) << 8;
            range <<= 8;
        }
    }
    void inline put(rac_t chance, bool bit)
    {
        assert(chance >= 0);
        assert(chance < range);

        if (bit) {
            low += range - chance;
            range = chance;
        } else {
            range -= chance;
        }

        output();
    }
public:
    RacOutput(IO &ioin) : io(ioin), range(Config::BASE_RANGE), low(0), delayed_byte(-1), delayed_count(0) { }

    void inline write_12bit_chance(uint16_t b12, bool bit)
    {
        put(Config::chance_12bit_chance(b12, range), bit);
    }

    void inline write_bit(bool bit)
    {
        put(range >> 1, bit);
    }

    void inline flush()
    {
        low += (Config::MIN_RANGE - 1);
        // is this the correct way to reliably flush?
        range = Config::MIN_RANGE - 1;
        output();
        range = Config::MIN_RANGE - 1;
        output();
        range = Config::MIN_RANGE - 1;
        output();
        range = Config::MIN_RANGE - 1;
        output();
        io.flush();
    }
};


template <typename IO>
class RacDummy
{
public:
    static void inline write_12bit_chance(uint16_t b12, bool) { }
    static void inline write_bit(bool) { }
    static void inline flush() { }
    RacDummy(IO &io) {}
};


template <typename IO> class RacOutput24 : public RacOutput<RacConfig24, IO>
{
public:
    RacOutput24(IO &io) : RacOutput<RacConfig24, IO>(io) { }
};
